composer create-project --prefer-dist laravel/laravel find-house

php artisan make:migration create_type_proprietes_table
php artisan make:migration add_user_id_to_comments_table --table=comments
php artisan migrate


href="{{asset('assets/ .css')}}"
href="{{asset('assets/admin/

$table->integer('age');
$table->bigInteger('balance');
$table->float('price');
$table->double('amount', 8, 2); // (total digits, decimal digits)
$table->boolean('is_active');
$table->date('birth_date');
$table->time('start_time');
$table->text('description');
$table->json('settings');
$table->enum('status', ['active', 'inactive', 'pending']);



8D62aW428G34
composer require krlove/eloquent-model-generator --dev


@foreach ($typeProprietes as $item)
{{ $item->id}}
@endforeach


action="{{ route('admin.post-type-propriete') }}"

php artisan config:cache
php artisan config:clear
php artisan cache:clear


php artisan krlove:generate:model User --table-name=users
php artisan krlove:generate:model TypePropriete --table-name=type_proprietes
php artisan krlove:generate:model Propriete --table-name=proprietes
php artisan krlove:generate:model Comment --table-name=comments
php artisan krlove:generate:model Message --table-name=messages
php artisan krlove:generate:model Newslater --table-name=newslaters
php artisan krlove:generate:model Caracteristique --table-name=caracteristiques
php artisan krlove:generate:model ProprieteImage --table-name=propriete_images
php artisan krlove:generate:model ProprieteCaracteristique --table-name=propriete_caracteristiques


row justify-content-center align-items-center"



@yield('nomPage') 



@extends('base')

@section('nomPage')
Propriétés | Find Houses
@endsection

@section('css')

@endsection

@section('body')
inner-pages homepage-4 agents hp-6 full hd-white
@endsection

@section('header')

@endsection

@section('header2')

@endsection

@section('logo')

@endsection

@section('navigation')

@endsection


@section('content')



@endsection

@section('script')


@endsection

php artisan cache:clear



{{ route('pages.search') }}

{{ route('pages.recherche-patient') }}

href="{{ request()->route()->getName() == 'pages.agent' ? 'javascript:void(0)' : route('pages.agent') }} "  class="{{ request()->route()->getName() == 'pages.agent' ? 'active' : '' }}"














git clone -b master https://github.com/expeditoklm/G-Immo.git


<!-- resources/views/admin/property-list.blade.php -->
@extends('layouts.app')

@section('title', 'Liste des Propriétés')

@section('content')



<link rel="stylesheet" href="{{ asset('assets/css/main.min.css') }}" />
 <!-- Required jQuery first, then Bootstrap Bundle JS -->
 <script src="{{ asset('assets/js/jquery.min.js') }}"></script>
        <script src="{{ asset('assets/js/bootstrap.bundle.min.js') }}"></script>



        @if($similarProperties->isNotEmpty())
        <h3>Featured Properties</h3>
    @endif


























public function addPropertyPost(Request $request)
{
    if (!session('propriete_id')) {
        $property = Propriete::create([

            'user_id' => FacadesAuth::user()->id,
            'type_propriete_id' => 1,
            'deleted' => 0,
        ]);
        session()->put('propriete_id', $property->id,);
    }

        $file = $request->file('file');
        if ($file) {
            $request->validate([
                'file' => 'nullable|file|mimes:jpeg,jpg,png,gif|max:2048',
            ]);
            $fileName = time() . '_' . $file->getClientOriginalName();
            $filePath = $file->storeAs('uploads', $fileName, 'public');
            
            $propriete_id = session('propriete_id');
            //dd("jeneregistre img");

            ProprieteImage::create([
                'url' => $filePath,
                'propriete_id' => $propriete_id,
                'deleted' => 0,
            ]);
        }


        if ($request->has('btn_submit')) {
            $propriete_id = session('propriete_id');
            $propriete = Propriete::where('id', $propriete_id)->first();

            $defaultTitre = $propriete->titre;
            $defaultDescription = $propriete->description;
            $defaultStatus = $propriete->status;
            $defaultTypeProprieteId = $propriete->type_propriete_id;
            $defaultPrix = $propriete->prix;
            $defaultSurface = $propriete->surface;
            $defaultPays = $propriete->pays;
            $defaultVille = $propriete->ville;
            $defaultQuartier = $propriete->quartier;
            $defaultNbPiece = $propriete->nbPiece;
            $defaultNbChambre = $propriete->nbChambre;
            $defaultNbToillete = $propriete->nbToillete;
            $defaultNomContact = $propriete->nomContact;
            $defaultPrenomContact = $propriete->prenomContact;
            $defaultEmailContact = $propriete->emailContact;
            $defaultPrenomContact = $propriete->type_propriete_id;
            $defaultTelContact = $propriete->telContact;
            
            // Ajouter la valeur par défaut au request si le champ n'est pas présent
            $request->merge([

                'titre' => $request->input('titre', $defaultTitre),
                'description' => $request->input('description', $defaultDescription),
                'status' => $request->input('status', $defaultStatus),
                'type_propriete_id' => $request->input('type_propriete_id', $defaultTypeProprieteId),
                'prix' => $request->input('prix', $defaultPrix),
                'surface' => $request->input('surface', $defaultSurface),
                'pays' => $request->input('pays', $defaultPays),
                'ville' => $request->input('ville', $defaultVille),
                'quartier' => $request->input('quartier', $defaultQuartier),
                'nbPiece' => $request->input('nbPiece', $defaultNbPiece),
                'nbChambre' => $request->input('nbChambre', $defaultNbChambre),
                'nbToillete' => $request->input('nbToillete', $defaultNbToillete),
                'nomContact' => $request->input('nomContact', $defaultNomContact),
                'prenomContact' => $request->input('prenomContact', $defaultNbPiece),
                'prenomContact' => $request->input('prenomContact', $defaultPrenomContact),
                'emailContact' => $request->input('emailContact', $defaultEmailContact),
                'telContact' => $request->input('telContact', $defaultTelContact),
        ]);
            
            $validated = $request->validate([
                
                'titre' => 'nullable|string|max:255',
                'description' => 'nullable|string',
                'status' => 'nullable|string',
                'type_propriete_id' => 'nullable|integer',
                'prix' => 'nullable|numeric',
                'surface' => 'nullable|numeric',
                'pays' => 'nullable|string',
                'ville' => 'nullable|string',
                'quartier' => 'nullable|string',
                'nbPiece' => 'nullable|integer',
                'nbChambre' => 'nullable|integer',
                'nbToillete' => 'nullable|integer',
                'nomContact' => 'nullable|string',
                'prenomContact' => 'nullable|string',
                'emailContact' => 'nullable|email',
                'telContact' => 'nullable|string',
                'caracteristique' => 'array',
            ]);
           

            $propriete->user_id = auth()->id(); // Utilisateur connecté
            $propriete->type_propriete_id = $validated['type_propriete_id'];
            $propriete->titre = $validated['titre'];
            $propriete->description = $validated['description'];
            $propriete->status = $validated['status'];
            $propriete->prix = $validated['prix'];
            $propriete->surface = $validated['surface'];
            $propriete->pays = $validated['pays'];
            $propriete->ville = $validated['ville'];
            $propriete->quartier = $validated['quartier'];
            $propriete->nbPiece = $validated['nbPiece'];
            $propriete->nbChambre = $validated['nbChambre'];
            $propriete->nbToillete = $validated['nbToillete'];
            $propriete->nomContact = $validated['nomContact'];
            $propriete->prenomContact = $validated['prenomContact'];
            $propriete->emailContact = $validated['emailContact'];
            $propriete->telContact = $validated['telContact'];
            $propriete->save();
            // Gestion des caractéristiques
            if ($request->has('caracteristique')) {
                $property->proprieteCaracteristiques()->sync($validated['caracteristique']);
            }
            session(['message' => 'Property add successfully.', 'message_type' => 'success']);
            return redirect()->route('admin.add-property')->with('success', 'Property added successfully');
            session()->forget('propriete_id');
        }
        return redirect()->route('admin.add-property')->with('success', 'Property added successfully');
}